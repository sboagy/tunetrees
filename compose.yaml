# TuneTrees Docker Compose configuration file.

services:
  server:
    image: docker.io/sboagy/tunetrees-server:latest
    container_name: tt-server
    pull_policy: always
    build:
      context: .
    ports:
      - 8000:8000
    env_file:
      - path: .env
        required: true # default
      - path: .env.compose_constants_tt1dd
        required: true
    environment:
      TUNETREES_DB: /tunetrees_base/tunetrees.sqlite3
    networks:
      - backend
    # command: bash -c "sleep infinity"
    volumes:
      - ${TUNETREES_DEPLOY_BASE_DIR}:/tunetrees_base:rw
    user: "1000:1000"

  frontend:
    image: docker.io/sboagy/tunetrees-frontend:latest
    container_name: tt-frontend
    pull_policy: always
    build:
      context: frontend
    env_file:
      - .env
      # - frontend/.env.local
      # - .env.compose_constants_tt1dd
    environment:
      NODE_ENV: production
      # NEXT_PUBLIC_TT_BASE_URL: ${NEXT_PUBLIC_TT_BASE_URL}
      NEXT_BASE_URL: "http://server:8000"
      NEXT_PUBLIC_TT_BASE_URL: "http://server:8000/tunetrees"
      TT_API_BASE_URL: "http://server:8000/tunetrees"
      NEXTAUTH_URL: https://tunetrees.com
      # NEXT_PUBLIC_TT_BASE_URL: https://tunetrees.com
      NEXTAUTH_URL_INTERNAL: http://frontend:3000
      # AUTH_TRUST_HOST: ${AUTH_TRUST_HOST}
    ports:
      - 3000:3000
    networks:
      - backend
    volumes:
      - ${TUNETREES_DEPLOY_BASE_DIR}/.next/cache:/usr/src/app/.next/cache:rw
    # webserver_local:
    #   image: nginx:mainline-alpine
    #   container_name: webserver
    #   restart: unless-stopped
    #   ports:
    #     - "80:80"
    #     - "443:443"
    # env_file:
    #   - .env
    #   - frontend/.env.local
    #   - .env.compose_constants_tt1dd
    #   volumes:
    #     # - ${TUNETREES_DEPLOY_BASE_DIR}/nginx-conf:/etc/nginx/conf.d
    #     - ${TUNETREES_DEPLOY_BASE_DIR}/nginx-conf/nginx_local.conf:/etc/nginx/conf.d/default.conf
    #     - ${TUNETREES_DEPLOY_BASE_DIR}/dhparam:/etc/ssl/certs
    #   depends_on:
    #     - frontend
    #   networks:
    #     - backend

  webserver:
    image: nginx:mainline-alpine
    container_name: webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
      - .env.compose_constants_tt1dd
    environment:
      NGINX_CONF_FILE: /etc/nginx/conf.d/ngnx.conf
    volumes:
      - ${TUNETREES_DEPLOY_BASE_DIR}/nginx-conf:/etc/nginx/conf.d
      - ${TUNETREES_DEPLOY_BASE_DIR}/certbot-var:/var/lib/letsencrypt
      - ${TUNETREES_DEPLOY_BASE_DIR}/certbot-etc:/etc/letsencrypt
      - ${TUNETREES_DEPLOY_BASE_DIR}/certbot/www:/var/www/certbot
      - dhparam:/etc/ssl/certs
    depends_on:
      - frontend
    networks:
      - backend
    command: /bin/sh -c "nginx -t && nginx -g 'daemon off;'"

  certbot:
    image: certbot/certbot
    # image: busybox
    container_name: certbot
    env_file:
      - .env
      - .env.compose_constants_tt1dd
    volumes:
      - ${TUNETREES_DEPLOY_BASE_DIR}/certbot-etc:/etc/letsencrypt:rw
      - ${TUNETREES_DEPLOY_BASE_DIR}/certbot-var:/var/lib/letsencrypt:rw
      - ${TUNETREES_DEPLOY_BASE_DIR}/certbot/www:/var/www/certbot:rw
    depends_on:
      - webserver
    # stdin_open: true # docker run -i
    # tty: true # docker run -t
    # command: sh
    # command: certonly --email sboagy@gmail.com --agree-tos --no-eff-email --staging -d tunetrees.com  -d www.tunetrees.com
    # command: certonly --email sboagy@gmail.com --agree-tos --no-eff-email --force-renewal -d tunetrees.com  -d www.tunetrees.com
    #
    # command: sh -c "sleep infinity"
    command: certonly -v --webroot --webroot-path=/var/www/certbot --email admin@tunetrees.com --agree-tos --no-eff-email --force-renewal --staging -d tunetrees.com  -d www.tunetrees.com
    # command: certonly -v --webroot --webroot-path=/var/www/certbot --email admin@tunetrees.com --agree-tos --no-eff-email --force-renewal -d tunetrees.com -d www.tunetrees.com
    #
    # command: certonly --webroot --webroot-path=/var/www/certbot --email sboagy@gmail.com --agree-tos --no-eff-email --force-renewal -d tunetrees.com  -d www.tunetrees.com
    # command: certonly --webroot --webroot-path=/var/www/certbot --email sboagy@gmail.com --agree-tos --no-eff-email --force-renewal -d tunetrees.com  -d www.tunetrees.com


volumes:
  # certbot-etc:
  # certbot-var:

  # web-root:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ${TUNETREES_DEPLOY_BASE_DIR}/views
  #     o: bind
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: ${TUNETREES_DEPLOY_BASE_DIR}/dhparam/
      # device: /Users/sboag/gittt/tunetrees/dhparam
      o: bind
# certbot:
#   driver: local
#   driver_opts:
#     type: none
#     device: /Users/sboag/gittt/tunetrees/certbot
#     o: bind
# certs:
#   driver: local
#   driver_opts:
#     type: none
#     device: /Users/sboag/gittt/tunetrees/certs
#     o: bind

networks:
  backend:
    driver: bridge
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
