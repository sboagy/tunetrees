# Initally generated via "docker init", available only on "Docker Desktop"
#
# For development, you can run the containers locally via "docker compose up --build".
#
# "docker compose down frontend server" is the best way to bring the servers down.
# Note: "docker compose down" seems not to work so well, it will shut down 
# the server, but then will post a "Network tunetrees_default  Resource is still in use"
# error.  "docker compose down frontend" can then be used to finish shutting down the frontend 
# as well as the default network.
# =================

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    image: docker.io/sboagy/tunetrees-server:latest
    container_name: tt-server
    build:
      context: .
    ports:
      - 8000:8000
    networks:
      - backend

  frontend:
    image: docker.io/sboagy/tunetrees-frontend:latest
    container_name: tt-frontend
    build:
      context: frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_TT_BASE_URL: ${NEXT_PUBLIC_TT_BASE_URL}
    ports:
      - 3000:3000
    networks:
      - backend

networks:
  backend:
    driver: bridge
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
