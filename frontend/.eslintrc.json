{
  "extends": [
    "./node_modules/gts/",
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
    // "plugin:@typescript-eslint/recommended-requiring-type-checking"
    // Add this line
    // ... other configurations
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json"
    // Crucial for type-aware linting
  },
  "rules": {
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "variable",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable", // Target variables again
        "types": [
          "function"
        ], // Specifically for functions
        "format": [
          "camelCase",
          "PascalCase"
        ], // Allow PascalCase for functions that are React components
        "filter": {
          "regex": "^[A-Z]", // Ensure the function name starts with a capital letter (typical for React components)
          "match": true
        }
      },
      {
        "selector": "typeLike",
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": "typeParameter",
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "T",
          "K"
        ]
      },
      {
        "selector": "enumMember",
        "format": [
          "UPPER_CASE"
        ]
      },
      {
        "selector": "interface",
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "I"
        ]
      },
      {
        "selector": [
          "variable"
        ], // Use an array to combine multiple selectors
        "modifiers": [
          "global"
        ], // Target only variables declared at the top level of a module
        "types": [
          "boolean",
          "string",
          "number",
          "function",
          "array"
        ],
        "format": [
          "UPPER_CASE"
        ],
        "filter": {
          "regex": "^[A-Z_]+$",
          "match": true
        }
      }
    ],
    // eslint-disable-line
    "quotes": "off"
  }
}
// {
//   "extends": [
//     "eslint:recommended",
//     "plugin:@typescript-eslint/recommended",
//     "plugin:@typescript-eslint/recommended-requiring-type-checking",
//     // For stronger type-checking rules
//     "plugin:react/recommended", // Or "next/core-web-vitals" if applicable 
//     "prettier"
//   ],
//   "plugins": [
//     "@typescript-eslint",
//     "react"
//   ], // Or "next"
//   "parser": "@typescript-eslint/parser",
//   "parserOptions": {
//     "ecmaVersion": "latest",
//     "sourceType": "module",
//     "ecmaFeatures": {
//       "jsx": true
//     },
//     "project": "./tsconfig.json"
//     // Crucial for type-aware linting
//   },
//   "rules": {
//     // TypeScript-specific rules:
//     "@typescript-eslint/no-unused-vars": "error",
//     "@typescript-eslint/explicit-function-return-type": "warn", // Or "error" for stricter enforcement
//     "@typescript-eslint/no-explicit-any": "warn", // Encourage explicit typing
//     // ...other rules
//     "@typescript-eslint/naming-convention": [
//       "error",
//       {
//         "selector": "variable",
//         "format": [
//           "camelCase",
//           "UPPER_CASE"
//         ], // Allow camelCase and UPPER_CASE for variables
//         "leadingUnderscore": "allow" // Allow leading underscores for certain cases (e.g., private variables)
//       }
//       // ... other naming convention rules
//     ]
//   }
// }
