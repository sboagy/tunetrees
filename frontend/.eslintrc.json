{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "./node_modules/gts/",
    "eslint:recommended",
    // "plugin:prettier/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/jsx-runtime", // Use this config for React 17+
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:unicorn/recommended"
    // Add this line
    // ... other configurations
  ],
  "plugins": [
    "@typescript-eslint",
    "react",
    "unicorn"
  ],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json"
    // Crucial for type-aware linting
  },
  "rules": {
    // Enforce PascalCase for component files
    // Enable the filename-case rule
    "unicorn/filename-case": [
      "error", // Or "warn" if you prefer
      {
        "cases": {
          "kebabCase": true
          // "pascalCase": true // Allow PascalCase for React components (if needed)
        },
        "ignore": [
          "layout.tsx",
          "page.tsx"
        ]
      }
    ],
    "unicorn/no-empty-file": "off",
    "unicorn/prefer-module": "off",
    "unicorn/no-null": "off",
    "unicorn/numeric-separators-style": "off",
    "unicorn/switch-case-braces": "off",
    "unicorn/no-negated-condition": "off",
    "unicorn/catch-error-name": "error",
    "unicorn/consistent-function-scoping": "off",
    "unicorn/custom-error-definition": "off",
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/expiring-todo-comments": "error",
    "unicorn/explicit-length-check": "error",
    // "unicorn/filename-case": "error",
    // "unicorn/import-index": "error",
    "unicorn/new-for-builtins": "off",
    "unicorn/no-abusive-eslint-disable": "error",
    // "unicorn/no-array-instanceof": "error",
    "unicorn/no-console-spaces": "off",
    // "unicorn/no-fn-reference-in-iterator": "off",
    "unicorn/no-for-loop": "error",
    "unicorn/no-hex-escape": "error",
    "unicorn/no-keyword-prefix": "off",
    "no-nested-ternary": "off",
    "unicorn/no-nested-ternary": "off",
    "unicorn/no-new-buffer": "error",
    "unicorn/no-process-exit": "error",
    "unicorn/no-unreadable-array-destructuring": "error",
    // "unicorn/no-unsafe-regex": "off",
    "unicorn/no-unused-properties": "off",
    "unicorn/no-zero-fractions": "error",
    "unicorn/number-literal-case": "error",
    "unicorn/prefer-add-event-listener": "error",
    // "unicorn/prefer-dataset": "error",
    // "unicorn/prefer-event-key": "error",
    // "unicorn/prefer-exponentiation-operator": "error",
    // "unicorn/prefer-flat-map": "error",
    "unicorn/prefer-includes": "error",
    // "unicorn/prefer-node-append": "error",
    // "unicorn/prefer-node-remove": "error",
    "unicorn/prefer-query-selector": "error",
    "unicorn/prefer-reflect-apply": "error",
    "unicorn/prefer-spread": "error",
    // "unicorn/prefer-starts-ends-with": "error",
    // "unicorn/prefer-text-content": "error",
    "unicorn/prefer-type-error": "error",
    "unicorn/prevent-abbreviations": "off",
    // "unicorn/regex-shorthand": "error",
    "unicorn/throw-new-error": "off",
    // These next few are interesting, and just starting happening on 
    // introduction of the unicorn plugin.  I should investigate them
    // further at some point.
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-redundant-type-constituents": "off",
    "@typescript-eslint/no-unsafe-argument": "off",
    // ========================================
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "variable",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable", // Target variables again
        "types": [
          "function"
        ], // Specifically for functions
        "format": [
          "camelCase",
          "PascalCase"
        ], // Allow PascalCase for functions that are React components
        "filter": {
          "regex": "^[A-Z]", // Ensure the function name starts with a capital letter (typical for React components)
          "match": true
        }
      },
      {
        "selector": "typeLike",
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": "typeParameter",
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "T",
          "K"
        ]
      },
      {
        "selector": "enumMember",
        "format": [
          "UPPER_CASE"
        ]
      },
      {
        "selector": "interface",
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "I"
        ]
      },
      {
        "selector": [
          "variable"
        ], // Use an array to combine multiple selectors
        "modifiers": [
          "global"
        ], // Target only variables declared at the top level of a module
        "types": [
          "boolean",
          "string",
          "number",
          "function",
          "array"
        ],
        "format": [
          "UPPER_CASE"
        ],
        "filter": {
          "regex": "^[A-Z_]+$",
          "match": true
        }
      }
    ],
    "quotes": "off"
  },
  "overrides": [
    {
      "files": [
        // for components/ui allowed to be kebab-case (the default)
        // given shadcn convention.
        "components/*.tsx",
        "app/(main)/pages/practice/components/**/*.tsx"
      ],
      "rules": {
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "pascalCase": true
            }
          }
        ]
      }
    }
    // {
    //   "files": [
    //     "app/**/*.ts",
    //     "src/pages/**/*.tsx"
    //   ],
    //   "rules": {
    //     "unicorn/filename-case": [
    //       "error",
    //       {
    //         "cases": {
    //           "kebabCase": true
    //         }
    //       }
    //     ]
    //   }
    // }
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
