{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "./node_modules/gts/",
    "eslint:recommended",
    // "plugin:prettier/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/jsx-runtime", // Use this config for React 17+
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
    // Add this line
    // ... other configurations
  ],
  "plugins": [
    "@typescript-eslint",
    "react"
  ],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json"
    // Crucial for type-aware linting
  },
  "rules": {
    // Enforce PascalCase for component files
    "react/jsx-filename-extension": [
      "warn",
      {
        "extensions": [
          ".tsx"
        ]
      }
    ],
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "variable",
        "format": [
          "camelCase"
        ],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable", // Target variables again
        "types": [
          "function"
        ], // Specifically for functions
        "format": [
          "camelCase",
          "PascalCase"
        ], // Allow PascalCase for functions that are React components
        "filter": {
          "regex": "^[A-Z]", // Ensure the function name starts with a capital letter (typical for React components)
          "match": true
        }
      },
      {
        "selector": "typeLike",
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": "typeParameter",
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "T",
          "K"
        ]
      },
      {
        "selector": "enumMember",
        "format": [
          "UPPER_CASE"
        ]
      },
      {
        "selector": "interface",
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "I"
        ]
      },
      {
        "selector": [
          "variable"
        ], // Use an array to combine multiple selectors
        "modifiers": [
          "global"
        ], // Target only variables declared at the top level of a module
        "types": [
          "boolean",
          "string",
          "number",
          "function",
          "array"
        ],
        "format": [
          "UPPER_CASE"
        ],
        "filter": {
          "regex": "^[A-Z_]+$",
          "match": true
        }
      }
    ],
    "quotes": "off"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
