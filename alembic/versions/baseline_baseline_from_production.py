"""baseline from production

Revision ID: baseline
Revises: 
Create Date: 2025-07-13 07:51:12.705959

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'baseline'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('genre',
    sa.Column('id', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('region', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('playlist_tune',
    sa.Column('playlist_ref', sa.Integer(), nullable=False),
    sa.Column('tune_ref', sa.Integer(), nullable=False),
    sa.Column('current', sa.Text(), nullable=True),
    sa.Column('learned', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.PrimaryKeyConstraint('playlist_ref', 'tune_ref')
    )
    op.create_table('tune_type',
    sa.Column('id', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('rhythm', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name='NewTable_PK')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hash', sa.Text(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('email_verified', sa.Text(), server_default=sa.text('(NULL)'), nullable=True),
    sa.Column('image', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('sr_alg_type', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('verification_token',
    sa.Column('identifier', sa.Text(), nullable=False),
    sa.Column('token', sa.Text(), nullable=True),
    sa.Column('expires', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('identifier')
    )
    op.create_table('account',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider_account_id', sa.Text(), nullable=False),
    sa.Column('provider', sa.Text(), nullable=True),
    sa.Column('type', sa.Text(), nullable=True),
    sa.Column('access_token', sa.Text(), nullable=True),
    sa.Column('id_token', sa.Text(), nullable=True),
    sa.Column('refresh_token', sa.Text(), nullable=True),
    sa.Column('scope', sa.Text(), nullable=True),
    sa.Column('expires_at', sa.Integer(), nullable=True),
    sa.Column('session_state', sa.Text(), nullable=True),
    sa.Column('token_type', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'provider_account_id')
    )
    op.create_table('genre_tune_type',
    sa.Column('genre_id', sa.Text(), nullable=False),
    sa.Column('tune_type_id', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['genre_id'], ['genre.id'], ),
    sa.ForeignKeyConstraint(['tune_type_id'], ['tune_type.id'], ),
    sa.PrimaryKeyConstraint('genre_id', 'tune_type_id')
    )
    op.create_table('instrument',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('private_to_user', sa.Integer(), nullable=True),
    sa.Column('instrument', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('genre_default', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.ForeignKeyConstraint(['private_to_user'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('private_to_user', 'instrument')
    )
    with op.batch_alter_table('instrument', schema=None) as batch_op:
        batch_op.create_index('idx_instrument_instrument', ['instrument'], unique=False)
        batch_op.create_index('idx_instrument_private_to_user', ['private_to_user'], unique=False)

    op.create_table('playlist',
    sa.Column('playlist_id', sa.Integer(), nullable=False),
    sa.Column('user_ref', sa.Integer(), nullable=True),
    sa.Column('instrument_ref', sa.Integer(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('sr_alg_type', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_ref'], ['user.id'], ),
    sa.PrimaryKeyConstraint('playlist_id'),
    sa.UniqueConstraint('user_ref', 'instrument_ref')
    )
    op.create_table('prefs_spaced_repetition',
    sa.Column('alg_type', sa.Enum('SM2', 'FSRS'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('fsrs_weights', sa.Text(), nullable=True),
    sa.Column('request_retention', sa.Float(), nullable=True),
    sa.Column('maximum_interval', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('alg_type', 'user_id')
    )
    op.create_table('session',
    sa.Column('expires', sa.Text(), nullable=True),
    sa.Column('session_token', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('session_token')
    )
    op.create_table('tab_group_main_state',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('which_tab', sa.Enum('scheduled', 'repertoire', 'catalog', 'analysis'), server_default=sa.text("'practice'"), nullable=True),
    sa.Column('playlist_id', sa.Integer(), nullable=True),
    sa.Column('tab_spec', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tune',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Text(), nullable=True),
    sa.Column('structure', sa.Text(), nullable=True),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('mode', sa.Text(), nullable=True),
    sa.Column('incipit', sa.Text(), nullable=True),
    sa.Column('genre', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('private_for', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['genre'], ['genre.id'], name='FK_tune_genre'),
    sa.ForeignKeyConstraint(['private_for'], ['user.id'], name='tune_user_FK'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('note',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tune_ref', sa.Integer(), nullable=False),
    sa.Column('user_ref', sa.Integer(), nullable=True),
    sa.Column('playlist_ref', sa.Integer(), nullable=True),
    sa.Column('created_date', sa.Text(), nullable=True),
    sa.Column('note_text', sa.Text(), nullable=True),
    sa.Column('public', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.Column('favorite', sa.Integer(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.CheckConstraint('favorite in (0, 1)'),
    sa.ForeignKeyConstraint(['playlist_ref'], ['playlist.playlist_id'], ),
    sa.ForeignKeyConstraint(['tune_ref'], ['tune.id'], ),
    sa.ForeignKeyConstraint(['user_ref'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.create_index('idx_tune_playlist', ['tune_ref', 'playlist_ref'], unique=False)
        batch_op.create_index('idx_tune_playlist_user_public', ['tune_ref', 'playlist_ref', 'user_ref', 'public'], unique=False)
        batch_op.create_index('idx_tune_user', ['tune_ref', 'user_ref'], unique=False)

    op.create_table('practice_record',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('playlist_ref', sa.Integer(), nullable=True),
    sa.Column('tune_ref', sa.Integer(), nullable=True),
    sa.Column('practiced', sa.Text(), nullable=True),
    sa.Column('quality', sa.Integer(), nullable=True),
    sa.Column('easiness', sa.Float(), nullable=True),
    sa.Column('interval', sa.Integer(), nullable=True),
    sa.Column('repetitions', sa.Integer(), nullable=True),
    sa.Column('review_date', sa.Text(), nullable=True),
    sa.Column('backup_practiced', sa.Text(), nullable=True),
    sa.Column('stability', sa.Float(), nullable=True),
    sa.Column('elapsed_days', sa.Integer(), nullable=True),
    sa.Column('lapses', sa.Integer(), nullable=True),
    sa.Column('state', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['playlist_ref'], ['playlist.playlist_id'], ),
    sa.ForeignKeyConstraint(['tune_ref'], ['tune.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tune_ref', 'playlist_ref')
    )
    op.create_table('reference',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('tune_ref', sa.Integer(), nullable=False),
    sa.Column('ref_type', sa.Text(), nullable=True),
    sa.Column('public', sa.Boolean(), nullable=True),
    sa.Column('favorite', sa.Boolean(), nullable=True),
    sa.Column('user_ref', sa.Integer(), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.CheckConstraint("ref_type in ('website', 'audio', 'video')"),
    sa.ForeignKeyConstraint(['tune_ref'], ['tune.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('reference', schema=None) as batch_op:
        batch_op.create_index('idx_tune_public', ['tune_ref', 'public'], unique=False)
        batch_op.create_index('idx_tune_user_ref', ['tune_ref', 'user_ref'], unique=False)
        batch_op.create_index('idx_user_tune_public', ['user_ref', 'tune_ref', 'public'], unique=False)

    op.create_table('table_state',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('screen_size', sa.Enum('small', 'full'), nullable=False),
    sa.Column('purpose', sa.Enum('practice', 'repertoire', 'catalog', 'analysis'), nullable=False),
    sa.Column('playlist_id', sa.Integer(), nullable=False),
    sa.Column('settings', sa.Text(), nullable=True),
    sa.Column('current_tune', sa.Integer(), server_default=sa.text('(null)'), nullable=True),
    sa.ForeignKeyConstraint(['playlist_id'], ['playlist.playlist_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'screen_size', 'purpose', 'playlist_id')
    )
    op.create_table('table_transient_data',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tune_id', sa.Integer(), nullable=False),
    sa.Column('playlist_id', sa.Integer(), nullable=False),
    sa.Column('purpose', sa.Text(), nullable=True),
    sa.Column('note_private', sa.Text(), nullable=True),
    sa.Column('note_public', sa.Text(), nullable=True),
    sa.Column('recall_eval', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['playlist_id'], ['playlist.playlist_id'], ),
    sa.ForeignKeyConstraint(['tune_id'], ['tune.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'tune_id', 'playlist_id')
    )
    op.create_table('tag',
    sa.Column('user_ref', sa.Integer(), nullable=False),
    sa.Column('tune_ref', sa.Integer(), nullable=False),
    sa.Column('tag_text', sa.Text(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['tune_ref'], ['tune.id'], ),
    sa.ForeignKeyConstraint(['user_ref'], ['user.id'], ),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('user_ref', 'tune_ref', 'tag_text')
    )
    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.create_index('idx_user_ref_tag_text', ['user_ref', 'tag_text'], unique=False)
        batch_op.create_index('idx_user_ref_tune_ref', ['user_ref', 'tune_ref'], unique=False)

    op.create_table('tune_override',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tune_ref', sa.Integer(), nullable=False),
    sa.Column('user_ref', sa.Integer(), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('type', sa.Text(), nullable=True),
    sa.Column('structure', sa.Text(), nullable=True),
    sa.Column('genre', sa.Text(), nullable=True),
    sa.Column('mode', sa.Text(), nullable=True),
    sa.Column('incipit', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Boolean(), server_default=sa.text('(FALSE)'), nullable=True),
    sa.ForeignKeyConstraint(['genre'], ['genre.id'], name='FK_tune_override_genre'),
    sa.ForeignKeyConstraint(['tune_ref'], ['tune.id'], name='tune_override_tune_FK'),
    sa.ForeignKeyConstraint(['user_ref'], ['user.id'], name='tune_override_user_FK'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tune_override')
    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.drop_index('idx_user_ref_tune_ref')
        batch_op.drop_index('idx_user_ref_tag_text')

    op.drop_table('tag')
    op.drop_table('table_transient_data')
    op.drop_table('table_state')
    with op.batch_alter_table('reference', schema=None) as batch_op:
        batch_op.drop_index('idx_user_tune_public')
        batch_op.drop_index('idx_tune_user_ref')
        batch_op.drop_index('idx_tune_public')

    op.drop_table('reference')
    op.drop_table('practice_record')
    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.drop_index('idx_tune_user')
        batch_op.drop_index('idx_tune_playlist_user_public')
        batch_op.drop_index('idx_tune_playlist')

    op.drop_table('note')
    op.drop_table('tune')
    op.drop_table('tab_group_main_state')
    op.drop_table('session')
    op.drop_table('prefs_spaced_repetition')
    op.drop_table('playlist')
    with op.batch_alter_table('instrument', schema=None) as batch_op:
        batch_op.drop_index('idx_instrument_private_to_user')
        batch_op.drop_index('idx_instrument_instrument')

    op.drop_table('instrument')
    op.drop_table('genre_tune_type')
    op.drop_table('account')
    op.drop_table('verification_token')
    op.drop_table('user')
    op.drop_table('tune_type')
    op.drop_table('playlist_tune')
    op.drop_table('genre')
    # ### end Alembic commands ###
