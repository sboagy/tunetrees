"""fsrs migration - production to target

Revision ID: cb94babb012d
Revises: 20011a33cdb1
Create Date: 2025-07-11 22:23:11.391586

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# Import view utilities from the local directory
import sys
import os
sys.path.insert(0, os.path.dirname(__file__) + "/..") 
from view_utils import create_views, drop_views


# revision identifiers, used by Alembic.
revision: str = 'cb94babb012d'
down_revision: Union[str, Sequence[str], None] = '20011a33cdb1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('account', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.TEXT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.alter_column('provider_account_id',
               existing_type=sa.TEXT(),
               nullable=False)

    with op.batch_alter_table('genre_tune_type', schema=None) as batch_op:
        batch_op.alter_column('genre_id',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('tune_type_id',
               existing_type=sa.TEXT(),
               nullable=False)

    with op.batch_alter_table('instrument', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)

    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.alter_column('public',
               existing_type=sa.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=True,
               existing_server_default=sa.text('(FALSE)'))

    with op.batch_alter_table('playlist', schema=None) as batch_op:
        batch_op.alter_column('playlist_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)

    with op.batch_alter_table('playlist_tune', schema=None) as batch_op:
        batch_op.alter_column('playlist_ref',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('tune_ref',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('practice_record', schema=None) as batch_op:
        batch_op.alter_column('easiness',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('stability',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
        batch_op.alter_column('difficulty',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)

    with op.batch_alter_table('prefs_spaced_repetition', schema=None) as batch_op:
        batch_op.alter_column('alg_type',
               existing_type=sa.TEXT(),
               type_=sa.Enum('SM2', 'FSRS'),
               existing_nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('request_retention',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)

    with op.batch_alter_table('reference', schema=None) as batch_op:
        batch_op.alter_column('public',
               existing_type=sa.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=True)
        batch_op.alter_column('favorite',
               existing_type=sa.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=True)

    with op.batch_alter_table('session', schema=None) as batch_op:
        batch_op.alter_column('session_token',
               existing_type=sa.TEXT(),
               nullable=False)
        batch_op.alter_column('user_id',
               existing_type=sa.TEXT(),
               type_=sa.Integer(),
               existing_nullable=True)

    with op.batch_alter_table('tab_group_main_state', schema=None) as batch_op:
        batch_op.alter_column('which_tab',
               existing_type=sa.TEXT(),
               type_=sa.Enum('scheduled', 'repertoire', 'catalog', 'analysis'),
               existing_nullable=True,
               existing_server_default=sa.text("'practice'"))

    with op.batch_alter_table('table_state', schema=None) as batch_op:
        batch_op.alter_column('screen_size',
               existing_type=sa.TEXT(),
               type_=sa.Enum('small', 'full'),
               existing_nullable=False)
        batch_op.alter_column('purpose',
               existing_type=sa.TEXT(),
               type_=sa.Enum('practice', 'repertoire', 'catalog', 'analysis'),
               existing_nullable=False)

    with op.batch_alter_table('table_transient_data', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('tune_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.alter_column('playlist_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.alter_column('tag_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)

    with op.batch_alter_table('verification_token', schema=None) as batch_op:
        batch_op.alter_column('identifier',
               existing_type=sa.TEXT(),
               nullable=False)


    # Recreate views with current schema
    drop_views()  # Drop existing views first
    create_views()  # Create views from target database
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('verification_token', schema=None) as batch_op:
        batch_op.alter_column('identifier',
               existing_type=sa.TEXT(),
               nullable=True)

    with op.batch_alter_table('tag', schema=None) as batch_op:
        batch_op.alter_column('tag_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('table_transient_data', schema=None) as batch_op:
        batch_op.alter_column('playlist_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('tune_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('table_state', schema=None) as batch_op:
        batch_op.alter_column('purpose',
               existing_type=sa.Enum('practice', 'repertoire', 'catalog', 'analysis'),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('screen_size',
               existing_type=sa.Enum('small', 'full'),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('tab_group_main_state', schema=None) as batch_op:
        batch_op.alter_column('which_tab',
               existing_type=sa.Enum('scheduled', 'repertoire', 'catalog', 'analysis'),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'practice'"))

    with op.batch_alter_table('session', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=sa.Integer(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('session_token',
               existing_type=sa.TEXT(),
               nullable=True)

    with op.batch_alter_table('reference', schema=None) as batch_op:
        batch_op.alter_column('favorite',
               existing_type=sa.Boolean(),
               type_=sa.INTEGER(),
               existing_nullable=True)
        batch_op.alter_column('public',
               existing_type=sa.Boolean(),
               type_=sa.INTEGER(),
               existing_nullable=True)

    with op.batch_alter_table('prefs_spaced_repetition', schema=None) as batch_op:
        batch_op.alter_column('request_retention',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('alg_type',
               existing_type=sa.Enum('SM2', 'FSRS'),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('practice_record', schema=None) as batch_op:
        batch_op.alter_column('difficulty',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
        batch_op.alter_column('stability',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
        batch_op.alter_column('easiness',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)

    with op.batch_alter_table('playlist_tune', schema=None) as batch_op:
        batch_op.alter_column('tune_ref',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('playlist_ref',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('playlist', schema=None) as batch_op:
        batch_op.alter_column('playlist_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('note', schema=None) as batch_op:
        batch_op.alter_column('public',
               existing_type=sa.Boolean(),
               type_=sa.INTEGER(),
               existing_nullable=True,
               existing_server_default=sa.text('(FALSE)'))

    with op.batch_alter_table('instrument', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('genre_tune_type', schema=None) as batch_op:
        batch_op.alter_column('tune_type_id',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('genre_id',
               existing_type=sa.TEXT(),
               nullable=True)

    with op.batch_alter_table('account', schema=None) as batch_op:
        batch_op.alter_column('provider_account_id',
               existing_type=sa.TEXT(),
               nullable=True)
        batch_op.alter_column('user_id',
               existing_type=sa.Integer(),
               type_=sa.TEXT(),
               existing_nullable=False)


    # Recreate views with current schema
    drop_views()  # Drop existing views first
    create_views()  # Create views from target database
    # ### end Alembic commands ###
